import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from config import BOT_TOKEN, ADMINS, LANGUAGES, DEFAULT_LANGUAGE
from db import save_observation, get_all_observations
import pandas as pd
from io import StringIO

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
PHOTO, DATE, LOCATION = range(3)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –æ–ø—ã–ª–∏—Ç–µ–ª—è üêù"
    )
    return PHOTO

# –ü—Ä–∏–µ–º —Ñ–æ—Ç–æ
async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['photo'] = update.message.photo[-1].file_id
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏ –¥–∞—Ç—É –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-04-13) –∏–ª–∏ –Ω–∞–∂–º–∏ '–°–µ–≥–æ–¥–Ω—è'."
    )
    return DATE

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
async def date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['date'] = update.message.text
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è."
    )
    return LOCATION

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
async def location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.location:
        context.user_data['latitude'] = update.message.location.latitude
        context.user_data['longitude'] = update.message.location.longitude
    else:
        context.user_data['address'] = update.message.text

    save_observation(
        user_id=update.message.from_user.id,
        photo_file_id=context.user_data['photo'],
        date=context.user_data['date'],
        latitude=context.user_data.get('latitude'),
        longitude=context.user_data.get('longitude'),
        address=context.user_data.get('address')
    )

    await update.message.reply_text("–ù–∞–±–ª—é–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ üíö")
    return ConversationHandler.END

# –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    observations = get_all_observations()
    if not observations:
        await update.message.reply_text("–ù–∞–±–ª—é–¥–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    df = pd.DataFrame(observations)
    csv = df.to_csv(index=False)
    file = StringIO(csv)
    file.name = "observations.csv"

    await update.message.reply_document(document=file)

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    application.add_handler(CommandHandler("export", export))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, photo)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date)],
            LOCATION: [MessageHandler(filters.LOCATION | filters.TEXT, location)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conversation_handler)

    application.run_polling()

if __name__ == "__main__":
    main()
