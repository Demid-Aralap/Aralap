import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Document
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from config import BOT_TOKEN, ADMINS
from db import save_observation, get_all_observations
import pandas as pd
from io import StringIO
from datetime import datetime
import threading
import http.server
import socketserver
import os
import mimetypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
PHOTO, DATE, LOCATION, FULLNAME, CONSENT, NEXT = range(6)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –æ–ø—ã–ª–∏—Ç–µ–ª—è–º–∏ –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n\n–í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª—è—Ö?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return CONSENT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è
async def consent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.lower() != "–¥–∞":
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /cancel.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –§–ò–û? (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], one_time_keyboard=True, resize_keyboard=True))
    return FULLNAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
async def fullname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data['fullname'] = update.message.text
    else:
        context.user_data['fullname'] = None

    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è üêù", reply_markup=ReplyKeyboardRemove())
    context.user_data['media'] = []
    return PHOTO

# –ü—Ä–∏–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    file_id = None
    media_type = None

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        media_type = "photo"
    elif update.message.video:
        file_id = update.message.video.file_id
        media_type = "video"
    elif update.message.document:
        mime = update.message.document.mime_type or ""
        if mime.startswith("image"):
            media_type = "photo"
        elif mime.startswith("video"):
            media_type = "video"
        else:
            await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            return PHOTO
        file_id = update.message.document.file_id

    if file_id:
        context.user_data['media'].append(file_id)
        await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ! –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–î–∞–ª–µ–µ\".",
            reply_markup=ReplyKeyboardMarkup([["–î–∞–ª–µ–µ"]], one_time_keyboard=True, resize_keyboard=True))
    return PHOTO

# –ü–æ—Å–ª–µ —Ñ–æ—Ç–æ ‚Äî –¥–∞—Ç–∞
async def date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13-04-2025 15:30)")
    return DATE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
async def save_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        dt = datetime.strptime(update.message.text, "%d-%m-%Y %H:%M")
        context.user_data['datetime'] = dt
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ 13-04-2025 15:30")
        return DATE

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.")
    return LOCATION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
async def location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lat, lon, address = None, None, None
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
    elif update.message.text:
        text = update.message.text.strip()
        address = text
        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        import re
        match = re.search(r'(-?\d+(\.\d+)?)[,\s]+(-?\d+(\.\d+)?)', text)
        if match:
            lat, lon = float(match.group(1)), float(match.group(3))

    context.user_data['latitude'] = lat
    context.user_data['longitude'] = lon
    context.user_data['address'] = address

    for file_id in context.user_data['media']:
        try:
            save_observation(
                user_id=update.message.from_user.id,
                photo_file_id=file_id,
                date=context.user_data['datetime'],
                latitude=lat,
                longitude=lon,
                address=address,
                fullname=context.user_data.get('fullname')
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {e}")

    await update.message.reply_text("–ù–∞–±–ª—é–¥–µ–Ω–∏–µ(-—è) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup([["–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"]], one_time_keyboard=True, resize_keyboard=True))
    return NEXT

# –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë":
        context.user_data.clear()
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è üêù")
        context.user_data['media'] = []
        return PHOTO
    else:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üíö", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

# –≠–∫—Å–ø–æ—Ä—Ç
async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    observations = get_all_observations()
    if not observations:
        await update.message.reply_text("–ù–∞–±–ª—é–¥–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    df = pd.DataFrame(observations)

    file_links = []
    for file_id in df['photo_file_id']:
        try:
            file = await context.bot.get_file(file_id)
            file_links.append(file.file_path)
        except:
            file_links.append("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏")

    df['file_link'] = file_links

    csv = df.to_csv(index=False)
    file = StringIO(csv)
    file.name = "observations.csv"
    await update.message.reply_document(document=file)

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ó–∞–≥–ª—É—à–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render
def start_dummy_server():
    port = int(os.environ.get("PORT", 10000))
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", port), handler) as httpd:
        print(f"Dummy server listening on port {port}")
        httpd.serve_forever()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    threading.Thread(target=start_dummy_server, daemon=True).start()

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("export", export))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CONSENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, consent)],
            FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fullname)],
            PHOTO: [
                MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, photo),
                MessageHandler(filters.Regex("^–î–∞–ª–µ–µ$"), date),
            ],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_date)],
            LOCATION: [MessageHandler(filters.LOCATION | filters.TEXT & ~filters.COMMAND, location)],
            NEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, next_step)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
